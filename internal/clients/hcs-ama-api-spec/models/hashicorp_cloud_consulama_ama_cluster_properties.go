// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudConsulamaAmaClusterProperties ClusterProperties contains properties the user selected when creating the
// managed app instance.
//
// swagger:model hashicorp.cloud.consulama.ama.ClusterProperties
type HashicorpCloudConsulamaAmaClusterProperties struct {

	// audit_log_storage_container_url is an Azure blob container URL for where
	// the log exfiltration process will copy audit logs.
	AuditLogStorageContainerURL string `json:"auditLogStorageContainerURL,omitempty"`

	// audit_logging_enabled controls whether Consul should emit audit logs
	AuditLoggingEnabled HashicorpCloudConsulamaAmaBoolean `json:"auditLoggingEnabled,omitempty"`

	// blob_container_name is the blob container to use to upload the Consul
	// configuration and certificates to.
	BlobContainerName string `json:"blobContainerName,omitempty"`

	// consul_automatic_upgrades are either 'enabled' or 'disabled'.
	ConsulAutomaticUpgrades string `json:"consulAutomaticUpgrades,omitempty"`

	// consul_ca_file is a base64-encoded ca chain file in PEM format that
	// should be used by the client agent to verify the authenticity of the
	// server
	ConsulCaFile string `json:"consulCaFile,omitempty"`

	// consul_cluster_id is the HCS-internal ID of the Consul cluster.
	ConsulClusterID string `json:"consulClusterId,omitempty"`

	// ClusterMode defines the purpose of the cluster, it can override
	// other cluster definitions (e.g. development will always have 1 node only).
	ConsulClusterMode HashicorpCloudConsulamaAmaClusterMode `json:"consulClusterMode,omitempty"`

	// consul_config_file is a base64-encoded JSON config file for a Consul
	// agent running in client mode.
	ConsulConfigFile string `json:"consulConfigFile,omitempty"`

	// consul_connect toggles the Consul Connect feature
	ConsulConnect string `json:"consulConnect,omitempty"`

	// consul_current_version is the Consul version currently running in the
	// cluster.
	ConsulCurrentVersion string `json:"consulCurrentVersion,omitempty"`

	// consul_datacenter is the datacenter name to configure the Consul cluster
	// as.
	// See: https://www.consul.io/docs/agent/options.html#_datacenter
	ConsulDatacenter string `json:"consulDatacenter,omitempty"`

	// consul_external_endpoint can be 'enabled' or 'disabled'.
	ConsulExternalEndpoint string `json:"consulExternalEndpoint,omitempty"`

	// consul_external_endpoint_url is the URL under which the Consul UI and API
	// are exposed.
	ConsulExternalEndpointURL string `json:"consulExternalEndpointUrl,omitempty"`

	// consul_initial_version is the initial Consul version to launch the cluster
	// with.
	ConsulInitialVersion string `json:"consulInitialVersion,omitempty"`

	// consul_num_servers is the number of Consul servers to provision.
	ConsulNumServers string `json:"consulNumServers,omitempty"`

	// consul_private_endpoint_url is the URL under which the Consul UI and API
	// are exposed on a private network. This is only accessible from a VNET
	// that is peered to the managed app's VNET.
	ConsulPrivateEndpointURL string `json:"consulPrivateEndpointUrl,omitempty"`

	// consul_snapshot_interval is the interval in which to take snapshots.
	ConsulSnapshotInterval string `json:"consulSnapshotInterval,omitempty"`

	// consul_snapshot_retention is the interval for how long to keep snapshots.
	ConsulSnapshotRetention string `json:"consulSnapshotRetention,omitempty"`

	// consul_vnet_cidr contains the Consul Cluster's VNet CIDR
	ConsulVnetCidr string `json:"consulVnetCidr,omitempty"`

	// email is the customer's email address
	Email string `json:"email,omitempty"`

	// federation_token is the token of the primary consul cluster in a federation.
	// It is only provided when federation is being requested.
	FederationToken string `json:"federationToken,omitempty"`

	// location is the Azure region the Consul cluster is being launched into.
	Location string `json:"location,omitempty"`

	// managed_app_id is the Azure Resource Manager ID of the managed app
	// instance. This ID is required to identified managed apps.
	ManagedAppID string `json:"managedAppId,omitempty"`

	// managedidentity is the Azure managed identity that should be assigned to
	// vmss resources created within the app
	ManagedIdentity string `json:"managedIdentity,omitempty"`

	// source_channel indicates which mechanism was used to create this cluster.
	// This typically should be: terraform-provider-hcs, azure-portal, hcs-cli.
	// This is synonymous to a user-agent.
	SourceChannel string `json:"sourceChannel,omitempty"`

	// state is the cluster's current state.
	// This is used in HTTP responses to Azure, but when this pb message is used
	// to persist cluster data in the DB, this attribute is either ignored or
	// stored with its default value of UNSET.
	State HashicorpCloudConsulamaAmaClusterState `json:"state,omitempty"`

	// storage_account_name is the storage account to use to upload the Consul
	// configuration and certificates to.
	StorageAccountName string `json:"storageAccountName,omitempty"`

	// storage_account_resource_group is the resource group of the storage account
	// to use to upload the Consul configuration and certificates to.
	StorageAccountResourceGroup string `json:"storageAccountResourceGroup,omitempty"`

	// vnet_name is the name of the Azure Virtual Network the consul cluster
	// is deployed in.
	VnetName string `json:"vnetName,omitempty"`
}

// Validate validates this hashicorp cloud consulama ama cluster properties
func (m *HashicorpCloudConsulamaAmaClusterProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditLoggingEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsulClusterMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudConsulamaAmaClusterProperties) validateAuditLoggingEnabled(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditLoggingEnabled) { // not required
		return nil
	}

	if err := m.AuditLoggingEnabled.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("auditLoggingEnabled")
		}
		return err
	}

	return nil
}

func (m *HashicorpCloudConsulamaAmaClusterProperties) validateConsulClusterMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsulClusterMode) { // not required
		return nil
	}

	if err := m.ConsulClusterMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("consulClusterMode")
		}
		return err
	}

	return nil
}

func (m *HashicorpCloudConsulamaAmaClusterProperties) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudConsulamaAmaClusterProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudConsulamaAmaClusterProperties) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudConsulamaAmaClusterProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
