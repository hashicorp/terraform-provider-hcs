// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudConsulamaAmaResourceNotificationRequest See ConsulAMAService.ResourceNotification
//
// swagger:model hashicorp.cloud.consulama.ama.ResourceNotificationRequest
type HashicorpCloudConsulamaAmaResourceNotificationRequest struct {

	// application_definition_id is the complete ARM ID of the AMA instance's
	// application definition.
	ApplicationDefinitionID string `json:"applicationDefinitionId,omitempty"`

	// application_id is the AMA instance's complete ARM ID.
	ApplicationID string `json:"applicationId,omitempty"`

	// billing_details contains billing related information about a managed app
	// that is being provisioned.
	BillingDetails *HashicorpCloudConsulamaAmaResourceNotificationRequestBillingDetails `json:"billingDetails,omitempty"`

	// error is added in case provosioning_state is "Failed" and describes the
	// error that lead to this condition.
	Error *HashicorpCloudConsulamaAmaResourceNotificationRequestError `json:"error,omitempty"`

	// event_time is the time at which the event occurred.
	// Format: 2006-01-02T15:04:05.999999999Z
	EventTime string `json:"eventTime,omitempty"`

	// event_type is the request type that lead to the notification. Can be
	// "PUT", "PATCH" (not observed yet), or "DELETE".
	EventType string `json:"eventType,omitempty"`

	// plan is information about the Azure Marketplace plan select before
	// provisioning the managed app.
	Plan *HashicorpCloudConsulamaAmaResourceNotificationRequestPlan `json:"plan,omitempty"`

	// provisioning_state is the state in which the AMA instance is. Can be
	// "Accepted",  "Succeeded", "Failed", "Deleting", or "Deleted".
	ProvisioningState string `json:"provisioningState,omitempty"`
}

// Validate validates this hashicorp cloud consulama ama resource notification request
func (m *HashicorpCloudConsulamaAmaResourceNotificationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudConsulamaAmaResourceNotificationRequest) validateBillingDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingDetails) { // not required
		return nil
	}

	if m.BillingDetails != nil {
		if err := m.BillingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingDetails")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudConsulamaAmaResourceNotificationRequest) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudConsulamaAmaResourceNotificationRequest) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudConsulamaAmaResourceNotificationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudConsulamaAmaResourceNotificationRequest) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudConsulamaAmaResourceNotificationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
